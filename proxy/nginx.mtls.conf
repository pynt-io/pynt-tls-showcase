server {
  listen 8443 ssl;
  
  # Server certificate configuration
  ssl_certificate certs/proxy-goat-internal-bundle.crt;
  ssl_certificate_key certs/proxy-goat-internal.key;
  
  # Client certificate verification
  ssl_client_certificate certs/root.crt;  # CA certificate to verify client certificates
  ssl_verify_client on;                   # Require client certificates
  ssl_verify_depth 1;                     # Only verify one level deep (client cert -> CA)
  
  # TLS protocol and cipher configuration
  ssl_protocols TLSv1.2 TLSv1.3;
  server_tokens off;
  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;

  # Optional: Add client certificate information to headers
  proxy_set_header X-SSL-Client-Cert $ssl_client_cert;
  proxy_set_header X-SSL-Client-Verify $ssl_client_verify;
  proxy_set_header X-SSL-Client-S-DN $ssl_client_s_dn;
  proxy_set_header X-SSL-Client-I-DN $ssl_client_i_dn;

  # Health check endpoint to demonstrate MTLS success
  location /mtls-health {
    add_header Content-Type application/json;
    return 200 '{"status":"success","message":"MTLS handshake successful","client_cert":"$ssl_client_s_dn"}';
  }

  location / {
    # Goat app
    proxy_pass http://44.202.3.35:6000;
  }
} 